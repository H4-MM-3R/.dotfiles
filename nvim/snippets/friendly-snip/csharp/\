{
  "hello world": {
    "prefix": "hw",
    "body": [
      "public static void Main(string[] args)",
      "{",
      "\tConsole.WriteLine(\"Hello World!\");$1",
      "}",
      "",
      "$0"
    ],
    "description": "Basic Run Test"
  },
  "class": {
    "prefix": "cls",
    "body": [
      "${1:public} class ${2:${TM_FILENAME_BASE}}",
      "{",
      "\t$3",
      "}",
      "",
      "$0"
    ],
    "description": "Class"
  },
  "abstract class": {
    "prefix": "clsa",
    "body": [
      "${1:public} abstract class ${2:${TM_FILENAME_BASE}}",
      "{",
      "\t$3",
      "}",
      "",
      "$0"
    ],
    "description": "Abstract Class"
  },
  "interface": {
    "prefix": "itf",
    "body": [
      "${1:public} interface I${2:${TM_FILENAME_BASE}}",
      "{",
      "\t$3",
      "}",
      "",
      "$0"
    ],
    "description": "Interface"
  },
  "enum": {
    "prefix": "enum",
    "body": ["${1:public} enum ${2:EnumName} ", "{", "\t$3", "}", "", "$0"],
    "description": "Enum"
  },
  "implemented class": {
    "prefix": "clsi",
    "body": [
      "${1:public} class ${2:${TM_FILENAME_BASE}} : ${3:BaseClass}",
      "{",
      "\t$4",
      "}",
      "",
      "$0"
    ],
    "description": "Implemented Class"
  },
  "custom exception": {
    "prefix": "ex",
    "body": [
      "public class ${1:MyException} : System.Exception",
      "{",
      "\tpublic $1() { }",
      "",
      "\tpublic $1(string message)",
      "\t\t: base(message) { }",
      "",
      "\tpublic $1(string message, System.Exception inner)",
      "\t\t: base(message, inner) { }",
      "}",
      "",
      "$0"
    ],
    "description": "Creates an exception class"
  },
  "variable": {
    "prefix": "v",
    "body": ["${1:var} ${2:name} = $3;", "$0"],
    "description": "Variable"
  },
  "object": {
    "prefix": "obj",
    "body": ["${1:ClassName} ${2:ObjectName} = new $1();", "$0"],
    "description": "Simple Object Initialization"
  },
  "object with composition": {
    "prefix": "obc",
    "body": ["${1:ClassName} ${2:ObjectName} = new ${3:ClassName}();", "$0"],
    "description": "Object Initialization with Composition"
  },
  "generic": {
    "prefix": "gen",
    "body": [
      "${1:ClassName}<${2:DataType}> ${3:ObjectName} = new $1<$2>();",
      "$0"
    ],
    "description": "Generic Initialization"
  },
  "generic with composition": {
    "prefix": "genc",
    "body": [
      "${1:ClassName}<${2:DataType}> ${3:ObjectName} = new ${4:ClassName}<$2>();",
      "$0"
    ],
    "description": "Generic Initialization with Composition"
  },
  "record": {
    "prefix": "rec",
    "body": ["public record ${1:RecordName}($2);", "$0"],
    "description": "Record"
  },
  "function": {
    "prefix": "fn",
    "body": [
      "${1:public} ${2:void} ${3:FunctionName}($4)",
      "{",
      "\t$5",
      "}",
      "",
      "$0"
    ],
    "description": "Simple Function"
  },
  "complete function": {
    "prefix": "fnc",
    "body": [
      "${1:public} ${2:static} ${3:void} ${4:FunctionName}($5)",
      "{",
      "\t$6",
      "}",
      "",
      "$0"
    ],
    "description": "Complete Function"
  },
  "abstract function": {
    "prefix": "fna",
    "body": ["${1:public} abstract ${2:void} ${3:FunctionName}($4);", "$0"],
    "description": "Abstract Function"
  },
  "expression lambda": {
    "prefix": "lme",
    "body": ["${1:param} => $1${0:result}"],
    "description": "Expression Lambda Template"
  },
  "statement lambda": {
    "prefix": "lms",
    "body": ["${1:param} => { $1 }$0"],
    "description": "Statement Lambda Template"
  },
  "anonymous function lambda": {
    "prefix": "lm",
    "body": ["${1:param} => $2"],
    "description": "Anonymous Function Lambda Template"
  },
  "main function": {
    "prefix": "psvm",
    "body": [
      "public static void Main(string[] args) ",
      "{",
      "\t$1",
      "}",
      "",
      "$0"
    ],
    "description": "Main Function"
  },
  "indexer": {
    "prefix": "indx",
    "body": [
      "public ${1:object} this[${2:int} index] ",
      "{",
      "\tget { return ${3:fieldName}[index] }",
      "\tset { $3[index] = value; }",
      "}",
      "",
      "$0"
    ],
    "description": "Indexer"
  },
  "property": {
    "prefix": "prop",
    "body": ["public ${1:int} ${2:PropertyName} { get; set; }", "$0"],
    "description": "Property"
  },
  "property with custom setter": {
    "prefix": "propc",
    "body": [
      "public ${1:int} ${2:PropertyName} { get; ${3:AccessModifier} set; }",
      "$0"
    ],
    "description": "Property with Custom Setter"
  },
  "property with backing field": {
    "prefix": "propfull",
    "body": [
      "private ${1:int} ${2:myVar};",
      "public ${1:int} ${3:MyProperty}",
      "{",
      "    get { return ${2:myVar}; }",
      "    set {",
      "        ${2:myVar} = value;$4 ",
      "    }",
      "}",
      "",
      "$0"
    ],
    "description": "Property with a Backing Field"
  },
  "if": {
    "prefix": "if",
    "body": ["if (${1:true}) ", "{", "\t$2", "}", "", "$0"],
    "description": "If Statement"
  },
  "else": {
    "prefix": "el",
    "body": ["else ", "{", "\t$1", "}", "", "$0"],
    "description": "Else Statement"
  },
  "if else": {
    "prefix": "ife",
    "body": [
      "if (${1:true}) ",
      "{",
      "\t$2",
      "} else ",
      "{",
      "\t$3",
      "}",
      "",
      "$0"
    ],
    "description": "If Else Statement"
  },
  "else if": {
    "prefix": "elif",
    "body": ["else if (${1:true}) ", "{", "\t$2", "}", "", "$0"],
    "description": "Else If Statement"
  },
  "ternary": {
    "prefix": "ter",
    "body": ["${1:Expression} ? ${2:ifTrue} : ${3:ifFalse};", "$0"],
    "description": "Ternary Operator"
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "switch (${1:expression}) ",
      "{",
      "\tcase ${2:value}:",
      "\t\t$3",
      "\t\tbreak;",
      "\tdefault:",
      "\t\t$4",
      "\t\tbreak;",
      "}",
      "",
      "$0"
    ],
    "description": "Switch Statement"
  },
  "case": {
    "prefix": "case",
    "body": ["case ${1:value}:", "\t$2", "\tbreak;", "$0"],
    "description": "Case Statement"
  },
  "try catch": {
    "prefix": "try",
    "body": [
      "try ",
      "{",
      "\t$1",
      "} catch (${2:Exception} ex) ",
      "{",
      "\t$3",
      "}",
      "",
      "$0"
    ],
    "description": "Try Catch Statement"
  },
  "try catch finally": {
    "prefix": "tryf",
    "body": [
      "try ",
      "{",
      "\t$1",
      "} catch (${2:Exception} ex) ",
      "{",
      "\t$3",
      "} finally ",
      "{",
      "\t$4",
      "}",
      "",
      "$0"
    ],
    "description": "Try Catch Finally Statement"
  },
  "do while": {
    "prefix": "do",
    "body": ["do", "{", "\t$1", "} while (${2:true});", "$0"],
    "description": "Do While Loop"
  },
  "while": {
    "prefix": "wh",
    "body": ["while (${1:true})", "{", "\t$2", "}", "", "$0"],
    "description": "While Loop"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (int ${1:i} = 0; ${1:i} < ${2:count}; ${1:i}++)",
      "{",
      "\t$3",
      "}",
      "",
      "$0"
    ],
    "description": "Traditional For Loop"
  },
  "reverse for": {
    "prefix": "forr",
    "body": [
      "for (int ${1:i} = ${2:count} - 1; ${1:i} >= 0; ${1:i}--)",
      "{",
      "\t$3",
      "}",
      "",
      "$0"
    ],
    "description": "Reverse For Loop"
  },
  "foreach": {
    "prefix": "foreach",
    "body": [
      "foreach (${1:var} ${2:item} in ${3:collection})",
      "{",
      "\t$4",
      "}",
      "",
      "$0"
    ],
    "description": "For Each Loop"
  },
  "Console.WriteLine": {
    "prefix": "cw",
    "body": ["Console.WriteLine($1);$0"],
    "description": "Console WriteLine"
  },
  "Console.ReadLine": {
    "prefix": "cr",
    "body": ["Console.ReadLine($1);$0"],
    "description": "Console ReadLine"
  }
}
